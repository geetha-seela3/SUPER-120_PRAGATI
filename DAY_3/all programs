#1-n and n-1
'''def numbers(n):
    if n>0:
        print(n,end=" ")  
        numbers(n-1)
        print(n,end=" ")  
numbers(5)'''

#with return
'''def rec_1_n(index,n):
    if index==n+1:
        return
    print(index,end=" ")
    rec_1_n(index+1,n)
rec_1_n(1,5)'''
    

#even no n-1
'''def even(n):
    if n==0:
        return
    print(n,end=" ")
    even(n-2)
even(20)'''

#odd n-1
''''def odd(n):
    if n<0:
        return
    print(n,end=" ")
    odd(n-2)
n=15
odd(n-1 if n%2==0 else n)'''

#odd and even 1-n

#factorial
'''def fact(n):
    if n==1:
        return 1
    return n*fact(n-1)
r=fact(5)
print(r)'''

#sumof given range
'''def fact(n):
    if n==1:
        return 1
    return n+fact(n-1)
r=fact(5)
print(r)'''
    
#sum of given list
'''def sum_list(index,nums,n):
    if index==n:
        return nums[index]
    return nums[index]+sum_list(index+1,nums,n)
nums=[1,2,3]
res=sum_list(0,nums,len(nums)-1)
print(res)'''
    
#sum of given list using slicing
'''def sum_list_slicing(nums):
    if len(nums)==1:
        return nums[0]
    return nums[0]+sum_list_slicing(nums[1:])
nums=[1,2,3]
r=sum_list_slicing(nums)
print(r)'''

#palindrome
'''def palindrome(nums):
    if(nums==nums[::-1]):
        print("palindrome")
palindrome([1,2,1])'''

#palindrome using recursion
'''def palindrome(left,nums,right):
    if left>=right:
        return "palindrome"
    if nums[left]!=nums[right]:
        return "not"
    return palindrome(left+1,nums,right-1)
nums=[1,2,4,1]
r=palindrome(0,nums,len(nums)-1)
print(r)'''

#min of list
'''def find_min(index,nums):
    if index==len(nums)-1:
        return nums[index]
    min=find_min(index+1,nums)
    return nums[index] if nums[index]<min else min
nums=[1,4,2,7,3]
r=find_min(0,nums)
print(r)'''

#max of list
'''def find_max(index,nums):
    if index==len(nums)-1:
        return nums[index]
    max=find_max(index+1,nums)
    return nums[index] if nums[index]>max else max
nums=[1,4,2,7,3]
r=find_max(0,nums)
print(r)'''

#min and max
'''def find_min_max(index,nums):
    if index==len(nums)-1:
        return nums[index],nums[index]
    min,max=find_min_max(index+1,nums)
    min_val=nums[index] if nums[index]<min else min
    max_val=nums[index] if nums[index]>max else max
    return min_val,max_val
nums=[1,4,2,7,3]
min,max=find_min_max(0,nums)
print(min,max)'''


#sum of digits
'''def sum_of_digits(n):
    if n<10:
        return n
    return n%10 +sum_of_digits(n//10)d
n=12345
r=sum_of_digits(n)
print(r)'''

#count digits in integer
'''def count_of_digits(n):
    if n<10:
        return 1
    return 1 + count_of_digits(n//10)
n=12345
r=count_of_digits(n)
print(r)'''

#sorted
'''def sorted(n,index):
    for index in range(index,len(n)-1):
        if n[index]>n[index+1]:
            index+=1
            return False
       
    return True
n=[8,4,2]
r=sorted(n,0)
print(r)'''

#sorted using recursion
'''def is_sorted(index,nums):
    if index==len(nums)-1:
        return True
    return (nums[index]<nums[index+1]) and is_sorted(index+1,nums)
nums=[1,3,2,6]
r=is_sorted(0,nums)
print(r)'''

#tower of hanoi
count=0
